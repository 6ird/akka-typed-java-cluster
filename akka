#!/bin/bash

helpCluster() {
  echo "Use the cluster command to start, stop, and view the status of Akka cluster nodes."
  echo
  echo "./akka cluster [start N | stop | status]"
  echo "./akka cluster start N...  # Starts one or more cluster nodes as specified by N, which must be 1-9."
  echo "./akka cluster stop        # Stops all currently cluster nodes."
  echo "./akka cluster status      # Shows an Akka Management view of the cluster status/state."
}

helpNode() {
  echo "Use the node command to start, stop, kill, down, or tail the log of cluster nodes."
  echo "Nodes are started on port 255N and management port 855N, N is the node number 1-9."
  echo
  echo "./akka node [start N | stop N | kill N | down N | tail N]"
  echo "./akka node start N...  # Start one or more cluster nodes for nodes 1-9."
  echo "./akka node stop N...   # Stop one or more cluster nodes for nodes 1-9."
  echo "./akka node kill N...   # Kill (kill -9) one or more cluster nodes for nodes 1-9."
  echo "./akka node down N...   # Down one or more cluster nodes for nodes 1-9."
  echo "./akka node tail N      # Tail the log file of the specified cluster node for nodes 1-9."
}

helpNet() {
  echo "Use the net command to block and unblock network access to cluster nodes."
  echo
  echo "./akka net block N | unblock | view"
  echo "./akka net block N...  # Block network access to node ports, ports 255N, nodes N 1-9."
  echo "./akka net unblock     # Reset the network blocking rules."
  echo "./akka net view        # View the current network blocking rules."
}

helpAll() {
  echo "This CLI is used to start, stop and monitor nodes in an Akka cluster."
  echo
  echo "These commands manage the Akka cluster as defined in this project. A cluster"
  echo "of nodes is started using the JAR file build from this project's Maven POM file."
  echo
  helpCluster
  echo
  helpNode
  echo
  helpNet
}

clusterCommand() {
  command=$1
  argument=$2

  case $command in
    "start")
      "$scriptPath"/cluster-start $argument
      ;;
    "stop")
      "$scriptPath"/cluster-stop
      ;;
    "status")
      "$scriptPath"/cluster-status
      ;;
    *)
      helpCluster
      ;;
  esac
}

nodeCommand() {
  command=$1
  shift
  arguments=$@

  case $command in
    "start")
      "$scriptPath"/node-start $arguments
      ;;
    "stop")
      "$scriptPath"/node-stop $arguments
      ;;
    "kill")
      "$scriptPath"/node-kill $arguments
      ;;
    "down")
      "$scriptPath"/node-down $arguments
      ;;
    "tail")
      "$scriptPath"/node-tail $arguments
      ;;
    *)
      helpNode
      ;;
  esac
}

netCommand() {
    command=$1
    shift
    arguments=$@

    case $command in
      "block")
        "$scriptPath"/net-block $arguments
        ;;
      "unblock")
        "$scriptPath"/net-unblock $arguments
        ;;
      "view")
        "$scriptPath"/net-view $arguments
        ;;
      *)
        helpNet
        ;;
    esac
}

parseCommand() {
  command=$1
  subCommand=$2
  shift
  shift
  arguments=$@

  case $command in
    "cluster")
      clusterCommand "$subCommand" $arguments
      ;;
    "node")
      nodeCommand "$subCommand" $arguments
      ;;
    "net")
      netCommand "$subCommand" $arguments
      ;;
    *)
      echo "Invalid command '$command'"
      echo
      helpAll
      ;;
  esac
}

scriptPath=$(dirname "$0")

if [ $# -eq 0 ] ; then
  helpAll
else
  command=$1
  subCommand=$2
  shift
  shift
  parseCommand "$command" "$subCommand" $@
fi
